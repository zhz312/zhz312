vector<vector<int>> threeSum(vector<int>& nums) {
    // 获取输入向量的大小
    int n = nums.size();

    // 将输入向量升序排序
    sort(nums.begin(), nums.end());

    // 初始化一个二维向量用于存储结果
    vector<vector<int>> ans;

    // 遍历数组以找到三个元素的和为零
    for (int first = 0; first < n; ++first) {
        // 对于第一个元素，跳过重复的情况
        if (first > 0 && nums[first] == nums[first - 1]) {
            continue;
        }

        // 初始化指针用于第二个和第三个元素
        int third = n - 1;
        int target = -nums[first];

        // 遍历数组以找到第二个元素
        for (int second = first + 1; second < n; ++second) {
            // 对于第二个元素，跳过重复的情况
            if (second > first + 1 && nums[second] == nums[second - 1]) {
                continue;
            }

            // 调整第三个指针以找到一个有效的三元组
            while (second < third && nums[second] + nums[third] > target) {
                --third;
            }

            // 如果指针重合，跳出循环
            if (second == third) {
                break;
            }

            // 如果找到一个有效的三元组，将其添加到结果向量中
            if (nums[second] + nums[third] == target) {
                ans.push_back({nums[first], nums[second], nums[third]});
            }
        }
    }
    return ans;
}
