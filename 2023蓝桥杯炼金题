#include<bits/stdc++.h>
#define int long long
using namespace std;
const int N = 1e4 + 10;
int a[N], b[N];
int n;

bool check_min(int mid)
{//这个是查找最小值的函数，
	for (int i = 0; i < n; i++) {
		if (b[i] < a[i] / mid) {//说明mid太小了，得右移
			return false;
		}
	}
	return true;//说明mid所有满足b[i]>=a[i]/mid;说明mid不够小
}

bool check_max(int mid)
{//这个是查找最大值的函数
	for (int i = 0; i < n; i++) {
		if (b[i] > a[i] / mid) {
			return false;//说明mid太大了，要把区间向左移
		}
	}
	return false;//说明所有数都满足b[i]<=a[i]/mid,此时mid比较大，说明要把mid左移
}

void solve() {
	//solve函数
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i] >> b[i];
	}
	int lmin = 1, rmin = 1e9;
	while (lmin < rmin) {
		int mid = lmin + rmin >> 1;
		if (check_min(mid)) {
			rmin = mid;//右边最小值
		}
		else {
			lmin = mid + 1;//说明mid太小了会出现错误，此时要向右移动，mid+1；
		}//当恰好相等时此时就可以实现
	}
	int lmax = 1, rmax = 1e9;
	while (lmax < rmax) {//二分法常见的
		int mid = (lmax + rmax) >> 1;
		if (check_max(mid)) {
			rmax = mid;//实现mid左移
		}
		else {
			lmax = mid + 1;//实现mid右移
		}
	}
	//最后得到的值是lmin和lmax;
	cout << lmin << " " << lmax << endl;
}
signed main()
{
	ios::sync_with_stdio(0);
	int t = 1;
	cin >> t;
	while (t--) {
		solve();
	}
	return 0;
}
