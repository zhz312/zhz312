#include <iostream>
#include <cstring>
#include <algorithm>
#include <map>
#include <queue>
#include <vector>
#include <cmath>
#include <set>
using namespace std;

#define int long long
#define endl '\n'
typedef pair<int, int> pii;
const int N = 1e5 + 10;

int dirx[10] = { 0,1,0,-1 };
int diry[10] = { -1,0,1,0 };

int arr[11][11] = { 0 };
int min_road = 999999;
int n, m;
int endx, endy;
int geted[11][11] = { 0 };

void dfs(int step, int x, int y) {
    if (x == endx && y == endy) {
        min_road = min(min_road, step);
        return;
    }

    for (int i = 0; i < 4; i++) {
        int newx = x + dirx[i];
        int newy = y + diry[i];
        if (newx >= 1 && newx <= n && newy >= 1 && newy <= m && arr[newx][newy] != 1 && geted[newx][newy] != 1) {
            geted[newx][newy] = 1;
            dfs(step + 1, newx, newy);
            geted[newx][newy] = 0; // 回溯
        }
    }
}

signed main() {
    cin >> n >> m;
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= m; j++) {
            cin >> arr[i][j];
        }
    }
    cin >> endx >> endy;

    geted[1][1] = 1; // 从起点开始
    dfs(0, 1, 1); // 调用dfs函数从起点开始搜索

    cout << min_road << endl;

    return 0;
}
