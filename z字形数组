用z字形数组解题。
class Solution {
public:
    string convert(string s, int numRows) {
       if(numRows<2){
           return s;
       }
       vector<string> rows(numRows); //设值一个数组，每个数组元素类型为string
       int i=0,flag=-1; //i为数组索引，flag决定上下遍历，flag为负数就是从下到上，flag为正就是从上到下。
       for(char c:s){
           rows[i].push_back(c); 
           if(i==0||i==numRows-1){
               flag=-flag;
           }
           i=i+flag;
       }
       string res;
       for(const string &row:rows){
           res=res+row;
       }
       return res;
    }
};

第二种方法： 先计算出几行几列，然后按照上面的方法用x,y坐标表示每个值的位置。最后将数组的每一行相加
class Solution {
public:
    string convert(string s, int numRows) {
        int n = s.length(), r = numRows;
        if (r == 1 || r >= n) {
            return s;
        }
        int t = r * 2 - 2;
        int c = (n + t - 1) / t * (r - 1);
        vector<string> mat(r, string(c, 0));
        for (int i = 0, x = 0, y = 0; i < n; ++i) {
            mat[x][y] = s[i];
            if (i % t < r - 1) {
                ++x; // 向下移动
            } else {
                --x;
                ++y; // 向右上移动
            }
        }
        string ans;
        for (auto &row : mat) {
            for (char ch : row) {
                if (ch) {
                    ans += ch;
                }
            }
        }
        return ans;
    }
};

